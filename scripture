#!/bin/sh -e

# Function definitions first

# Reduce verbosity of hook calls
scripture_hook () {
	# We can't use mktemp for scripture_hide because the user
	# won't know what the filename is

	# Giving them the filename as a hook argument is messy, IMO
	# Harcoding scripture_hide is better

	rm -f /tmp/scripture_hide
	[ "$SCRIPTURE_HOOK" ] && $SCRIPTURE_HOOK "$@"
}

# POSIX bc workaround
greater_than () {
	# return 0 = no error
	# return 1 = error

	# is $1 > $2 ?

	# https://unix.stackexchange.com/a/558546
	comp=$(printf 'if(%s > %s){a=1};a\n' "$1" "$2" | bc -s)

	# bc returns 0 for no, 1 for yes
	# so we return the opposite

	[ "$comp" = 1 ] \
		&& return 0 \
		|| return 1
}

# Delegate reviewing (getting the grade)
review_card () {
	# input: $1 - card to review
	# output: grade (via "return", so you use $?)

	# Get the Front and Back of your card
	front=$(echo "$1" | cut -d "$DELIMITER" -f 1)
	back=$(echo "$1" | cut -d "$DELIMITER" -f 2)

	# Get grade (q) from user
	scripture_hook "front_show" "$front" "$back"
	[ -f /tmp/scripture_hide ] || echo "$front"

	read -r < /dev/tty

	scripture_hook "back_show" "$front" "$back"
	[ -f /tmp/scripture_hide ] || echo "$back"
	echo

	# Loop until user gives a valid answer
	while :
	do
		echo "Enter your grade (0-5):"
		read -r q < /dev/tty
		echo "$q" | grep -q "^[0-5]$" && break
	done

	scripture_hook "card_complete" "$front" "$back" "$q"

	# Function output
	return "$q"
}

# Delegate SM-2 calculation
compute_sm2 () {
	# input: $1 - card, $2 - grade
	# output: new card

	# Get the Front and Back of your card
	front=$(echo "$1" | cut -d "$DELIMITER" -f 1)
	back=$(echo "$1" | cut -d "$DELIMITER" -f 2)

	# Grade alias as per wikipedia
	q="$2"

	# n - repetition number
	n=$(echo "$1" | cut -d "$DELIMITER" -f 3)
	# EF - easiness factor
	EF=$(echo "$1" | cut -d "$DELIMITER" -f 4)
	# I - interval
	I=$(echo "$1" | cut -d "$DELIMITER" -f 5)

	# Split depending on q >= 3 or not
	correct_response=0
	[ "$q" -ge 3 ] && correct_response=1
	case $correct_response in
		1)
			# Correct response
			case "$n" in
				0) I=1 ;;
				1) I=6 ;;
				*) I=$(echo "$I * $EF" | bc -l) ;;
			esac

			EF=$(echo "$EF + (0.1 - (5 - $q) * (0.08 + (5 - $q) * 0.02))" | bc -l)
			greater_than 1.3 "$EF" && EF=1.3

			# Increment n
			n=$((n+1))

			;;
		0)
			# Incorrect response
			n=0
			I=1

			;;
	esac

	# Create new line
	echo "$front$DELIMITER$back$DELIMITER$n$DELIMITER$EF$DELIMITER$I$DELIMITER$(date -I)"
}

update_deck () {
	# input: $1 - old card, $2 - new card, $3 - deck file
	# no output: just updating

	# Both lines have to be escaped
	# 's/[]\/()$*.^|[]/\\&/g' is wrong!
	# - Do NOT escape () anywhere!
	# - Do NOT escape | anywhere!

	# Escape lines
	new_line_escaped="$(echo "$2" | sed -e 's/[]$*.^[]/\\&/g' -e 's|/|\\/|g')"
	old_line_escaped="$(echo "$1" | sed -e 's/[]$*.^[]/\\&/g' -e 's|/|\\/|g')"

	# Make the replacement
	sed -i "s/^$old_line_escaped\$/$new_line_escaped/" "$3"
}

# Start of main program

# TSV by default, otherwise use user's preference
DELIMITER=${SCRIPTURE_DELIMITER:-"	"}

# Usage sanitization

# No deck file provided
[ -z "$1" ] && echo "Usage: scripture <deck file>" && exit 1

# Non-existent deck file
[ -f "$1" ] || no_file=1
[ "$no_file" ] \
	&& echo "No such deck file: $1" \
	&& exit 1

# Use "hook" file if it exists
[ -z "$SCRIPTURE_HOOK" ] \
	&& [ -f hook ] \
	&& SCRIPTURE_HOOK=./hook

scripture_hook "review_start" "$1"

# Remove trailing spaces (https://github.com/michaelskyba/scripture/issues/1)
sed -i "s/ \+\$//g" "$1"

# Make sure main temporary file directory exists
mkdir -p /tmp/scripture

# Deck file with missing fields
tmp_missing_fields=$(mktemp -p /tmp/scripture)
cp "$1" "$tmp_missing_fields"
while read -r line
do
	# Check how many instances of $DELIMITER are in the line
	splits=$(echo "$line" | sed "s/[^$DELIMITER]//g" | awk '{ print length }')

	# Decide what we will do with this number, if there is something to do
	type="invalid"
	[ "$splits" = 5 ] && continue
	[ "$splits" = 0 ] && continue
	[ "$splits" = 1 ] && type="new_card"

	# Commit
	case "$type" in
		"invalid")
			echo "Invalid line: $line"
			echo "Provide exactly two columns (front and back) for new cards that you make."
			echo "See the README for more information."

			exit 1

			;;

		"new_card")
			# arbitrary date that has to be in the past
			date="2021-04-01"

			default_line=$(echo "$line\$DELIMITER0\$DELIMITER2.5\$DELIMITER0\$DELIMITER$date" | sed "s/\$DELIMITER/$DELIMITER/g")

			update_deck "$line" "$default_line" "$tmp_missing_fields"

			;;
	esac
done < "$1"
mv "$tmp_missing_fields" "$1"

# Create temp files
tmp_to_review=$(mktemp -u -p /tmp/scripture)
tmp_less_than_four=$(mktemp -u -p /tmp/scripture)
tmp_upcoming_date=$(mktemp -p /tmp/scripture)

# Determine which cards need to be reviewed
while read -r line
do
	# Skip comments
	[ "$(echo "$line" | sed "s/[^$DELIMITER]//g" | awk '{ print length }')" = 0 ] && continue

	# Get epoch time of last review
	output=$(echo "$line" | cut -d "$DELIMITER" -f 6)
	output=$(date -d "$output" +%s)

	# See if time since last review outlasts inter_repetition_interval (I)
	# 86400 --> num of seconds in 24 hours
	I=$(echo "$line" | cut -d "$DELIMITER" -f 5)
	time_since=$(echo "$(date +%s) - $output" | bc -l)

	# Does time since last review fulfills I's requirement
	I_thres=$(echo "$I * 86400" | bc -l)
	greater_than "$time_since" "$I_thres" && echo "$line" >> "$tmp_to_review"

	# Add review date to temporary file, for telling the user
	# the next time to review, if they have no reviews currently
	next_date=$(echo "$output + $I_thres" | bc -l)
	next_date=${next_date%%.*}
	echo "$next_date" >> "$tmp_upcoming_date"
done < "$1"

# Exit if no cards to review
[ -f "$tmp_to_review" ] || none=1
[ "$none" ] \
	&& echo "No cards to review. Next: $(date -d "@$(sort < "$tmp_upcoming_date" | head -1)" -I)" \
	&& exit

# Backup of deck file in case of accidental stop during review
tmp_deck_backup=/tmp/scripture/$(date -I)-$(date +%s)
cp "$1" "$tmp_deck_backup"

# Start main loop
while :
do
	scripture_hook "pre_iteration" "$tmp_to_review"

	while read -r line
	do
		clear

		# Review the card
		review_card "$line"
		grade="$?"

		# Calculate the new variables, ending up with an update line
		new_line_raw=$(compute_sm2 "$line" "$grade")

		# Update the deck file
		update_deck "$line" "$new_line_raw" "$1"

		# SM-2 asks the user to "re-review any cards they marked with a grade less than 4 repeatedly until they give a grade â‰¥ 4"
		# So, we need to create a list of these re-review cards

		# If the grade is less than four, add the card to the list
		[ "$grade" -lt 4 ] && echo "$new_line_raw" >> "$tmp_less_than_four"

	done < "$tmp_to_review"

	# Exit if none
	[ -f "$tmp_less_than_four" ] || done=1
	[ "$done" ] \
		&& scripture_hook "review_complete" "$1" \
		&& rm -f "$tmp_deck_backup" \
		&& exit

	# If there are still pending cards, we need to restart
	mv "$tmp_less_than_four" "$tmp_to_review"
done
