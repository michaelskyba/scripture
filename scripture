#!/usr/bin/bash

# Usage sanitization
[ -z "$1" ] && echo "usage: scripture <deck file>" && exit 1

# TSV by default, otherwise use user's preference
DELIMITER=${SCRIPTURE_DELIMITER:-"	"}

# Determine which cards need to be reviewed
rm /tmp/scripture 2> /dev/null
while read -r line
do
	# Get epoch time of last review
	output=$(echo "$line" | cut -d"$DELIMITER" -f 6)
	output=$(date +%s -d"$output")

	# See if time since last review outlasts inter_repetition_interval (I)
	# 86400 --> num of seconds in 24 hours
	I=$(echo "$line" | cut -d"$DELIMITER" -f 5)
	time_since=$(echo "$(date +%s) - $output" | bc -l)

	# Does time since last review fulfills I's requirement
	[ "$time_since" -gt "$(echo "$I * 86400" | bc -l)" ] && echo "$line" >> /tmp/scripture
done < "$1"

# Review each card
rm log
while read -r line
do
	clear

	# Get the Front and Back of your card
	front=$(echo "$line" | cut -d"$DELIMITER" -f 1)
	back=$(echo "$line" | cut -d"$DELIMITER" -f 2)

	# Get grade (q) from user
	read -rp "$front" </dev/tty
	echo "$back"
	echo

	# Loop until user gives a valid answer
	while :
	do
		read -rp "Enter your grade (0-5): " q < /dev/tty
		echo "$q" | grep "^[0-5]$" > /dev/null && break
	done
	
	# SM-2 calculation

	# n - repetition number
	n=$(echo "$line" | cut -d"$DELIMITER" -f 3)
	# EF - easiness factor
	EF=$(echo "$line" | cut -d"$DELIMITER" -f 4)
	# I - interval
	I=$(echo "$line" | cut -d"$DELIMITER" -f 5)

	# Split depending on q >= 3 or not
	correct_response=0
	[ "$q" -ge 3 ] && correct_response=1
	case $correct_response in
		1)
			# Correct response
			case "$n" in
				0) I=1 ;;
				1) I=6 ;;
				*) I=$(echo "$I * $EF" | bc -l) ;;
			esac

			EF=$(echo "$EF + (0.1 - (5 - $q) * (0.08 + (5 - $q) * 0.02))" | bc -l)
			[ "$(echo "$EF < 1.3" | bc -l)" == 1 ] && EF=1.3

			# Increment n
			n=$(echo "n + 1" | bc -l)

			;;
		0)
			# Incorrect response
			n=0
			I=1

			;;
	esac

	# Make the replacement
	new_line_raw="$front$DELIMITER$back$DELIMITER$n$DELIMITER$EF$DELIMITER$I$DELIMITER$(date -I)"

	echo "--------------------" >> log
	echo "old:" >> log
	echo "$line" >> log
	echo "new:" >> log
	echo "$new_line_raw" >> log

	# Both lines have to be escaped
	new_line_escaped="$(echo "$new_line_raw" | sed -e 's/[]$*.^|[]/\\&/g')"
	echo "$new_line_escaped" >> log

	# 's/[]\/()$*.^|[]/\\&/g' is wrong! Do NOT escape () anywhere!

	old_line_escaped="$(echo "$line" | sed -e 's/[]$*.^|[]/\\&/g')"
	echo "$old_line_escaped" >> log
	echo "--------------------" >> log

	sed -i "s/^$old_line_escaped\$/$new_line_escaped/" "$1"
	# sed -i "s/^$old_line_escaped\$/$new_line_escaped/" /tmp/scripture
done < /tmp/scripture
